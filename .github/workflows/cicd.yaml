# .github/workflows/cicd.yaml
name: Backend CI/CD Pipeline

on:
  push:
    branches: 
      - main
  workflow_dispatch:

env:
  REGISTRY: acrdigitalgarage02.azurecr.io

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build applications
        run: |
          echo "Building member service..."
          ./gradlew :member:clean :member:build
          echo "Building mysub service..."
          ./gradlew :mysub-infra:clean :mysub-infra:build
          echo "Building recommend service..."
          ./gradlew :recommend:clean :recommend:build

      - name: Run tests
        run: |
          echo "Testing member service..."
          ./gradlew :member:test
          echo "Testing mysub service..."
          ./gradlew :mysub-infra:test
          echo "Testing recommend service..."
          ./gradlew :recommend:test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            member/build/libs/*.jar
            mysub-infra/build/libs/*.jar
            recommend/build/libs/*.jar
          retention-days: 1

  release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read deployment environment variables (개선된 버전)
        run: |
          # Windows 스타일 줄바꿈 제거하고 환경변수 읽기
          sed 's/\r$//' deployment/deploy_env_vars | while IFS='=' read -r key value; do
            # 주석과 빈 줄 제외
            if [[ ! "$key" =~ ^#.* ]] && [[ -n "$key" ]] && [[ -n "$value" ]]; then
              # 공백 제거하고 환경변수 설정
              clean_key=$(echo "$key" | tr -d '[:space:]')
              clean_value=$(echo "$value" | tr -d '\r\n')
              echo "$clean_key=$clean_value" >> $GITHUB_ENV
              echo "Set: $clean_key=$clean_value"
            fi
          done

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Generated image tag: $IMAGE_TAG"

      - name: Debug environment variables
        run: |
          echo "=== Environment Variables Debug ==="
          echo "registry: [${{ env.registry }}]"
          echo "image_org: [${{ env.image_org }}]"
          echo "IMAGE_TAG: [$IMAGE_TAG]"
          echo "registry length: ${#registry}"
          echo "image_org length: ${#image_org}"
          echo "===================================="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push member service image
        run: |
          echo "Building member service image..."
          
          # 환경변수 정리
          CLEAN_REGISTRY=$(echo "${{ env.registry }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_ORG=$(echo "${{ env.image_org }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\r\n[:space:]')
          
          IMAGE_NAME="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/member:${CLEAN_IMAGE_TAG}"
          echo "Full image name: $IMAGE_NAME"
          
          docker build \
            --build-arg BUILD_LIB_DIR="member/build/libs" \
            --build-arg ARTIFACTORY_FILE="member.jar" \
            -f deployment/container/Dockerfile \
            -t "$IMAGE_NAME" .
          
          docker push "$IMAGE_NAME"
          echo "Successfully pushed member:$CLEAN_IMAGE_TAG"

      - name: Build and push mysub service image
        run: |
          echo "Building mysub service image..."
          
          # 환경변수 정리
          CLEAN_REGISTRY=$(echo "${{ env.registry }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_ORG=$(echo "${{ env.image_org }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\r\n[:space:]')
          
          IMAGE_NAME="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/mysub:${CLEAN_IMAGE_TAG}"
          echo "Full image name: $IMAGE_NAME"
          
          docker build \
            --build-arg BUILD_LIB_DIR="mysub-infra/build/libs" \
            --build-arg ARTIFACTORY_FILE="mysub.jar" \
            -f deployment/container/Dockerfile \
            -t "$IMAGE_NAME" .
          
          docker push "$IMAGE_NAME"
          echo "Successfully pushed mysub:$CLEAN_IMAGE_TAG"

      - name: Build and push recommend service image
        run: |
          echo "Building recommend service image..."
          
          # 환경변수 정리
          CLEAN_REGISTRY=$(echo "${{ env.registry }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_ORG=$(echo "${{ env.image_org }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '\r\n[:space:]')
          
          IMAGE_NAME="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/recommend:${CLEAN_IMAGE_TAG}"
          echo "Full image name: $IMAGE_NAME"
          
          docker build \
            --build-arg BUILD_LIB_DIR="recommend/build/libs" \
            --build-arg ARTIFACTORY_FILE="recommend.jar" \
            -f deployment/container/Dockerfile \
            -t "$IMAGE_NAME" .
          
          docker push "$IMAGE_NAME"
          echo "Successfully pushed recommend:$CLEAN_IMAGE_TAG"

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read deployment environment variables (개선된 버전)
        run: |
          # Windows 스타일 줄바꿈 제거하고 환경변수 읽기
          sed 's/\r$//' deployment/deploy_env_vars | while IFS='=' read -r key value; do
            # 주석과 빈 줄 제외
            if [[ ! "$key" =~ ^#.* ]] && [[ -n "$key" ]] && [[ -n "$value" ]]; then
              # 공백 제거하고 환경변수 설정
              clean_key=$(echo "$key" | tr -d '[:space:]')
              clean_value=$(echo "$value" | tr -d '\r\n')
              echo "$clean_key=$clean_value" >> $GITHUB_ENV
            fi
          done

      - name: Set image tag from previous job
        run: |
          echo "IMAGE_TAG=${{ needs.release.outputs.image-tag }}" >> $GITHUB_ENV

      - name: Azure Login  
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Kubernetes manifest
        run: |
          # 환경변수 정리 후 export
          export namespace=$(echo "${{ env.namespace }}" | tr -d '\r\n[:space:]')
          export allowed_origins=$(echo "${{ env.allowed_origins }}" | tr -d '\r\n[:space:]')
          export ingress_host=$(echo "${{ env.ingress_host }}" | tr -d '\r\n[:space:]')
          export jwt_secret_key=$(echo "${{ env.jwt_secret_key }}" | tr -d '\r\n[:space:]')
          export postgres_user=$(echo "${{ env.postgres_user }}" | tr -d '\r\n[:space:]')
          export postgres_password=$(echo "${{ env.postgres_password }}" | tr -d '\r\n[:space:]')
          export replicas=$(echo "${{ env.replicas }}" | tr -d '\r\n[:space:]')
          export resources_requests_cpu=$(echo "${{ env.resources_requests_cpu }}" | tr -d '\r\n[:space:]')
          export resources_requests_memory=$(echo "${{ env.resources_requests_memory }}" | tr -d '\r\n[:space:]')
          export resources_limits_cpu=$(echo "${{ env.resources_limits_cpu }}" | tr -d '\r\n[:space:]')
          export resources_limits_memory=$(echo "${{ env.resources_limits_memory }}" | tr -d '\r\n[:space:]')
          
          # 이미지 경로도 정리
          CLEAN_REGISTRY=$(echo "${{ env.registry }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_ORG=$(echo "${{ env.image_org }}" | tr -d '\r\n[:space:]')
          CLEAN_IMAGE_TAG=$(echo "${{ env.IMAGE_TAG }}" | tr -d '\r\n[:space:]')
          
          export member_image_path="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/member:${CLEAN_IMAGE_TAG}"
          export mysub_image_path="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/mysub:${CLEAN_IMAGE_TAG}"
          export recommend_image_path="${CLEAN_REGISTRY}/${CLEAN_IMAGE_ORG}/recommend:${CLEAN_IMAGE_TAG}"
          
          # manifest 생성
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/deploy.yaml
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s

      - name: Display deployment status
        run: |
          echo "========================================="
          echo "Backend services deployment completed!"
          echo "Ingress Host: ${{ env.ingress_host }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"
          echo "========================================="