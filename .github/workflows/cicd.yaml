# .github/workflows/cicd.yaml
name: Backend CI/CD Pipeline

on:
  push:
    branches: 
      - main
  workflow_dispatch:

env:
  REGISTRY: acrdigitalgarage02.azurecr.io

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup TestContainers
        run: |
          # Member service TestContainers 설정
          mkdir -p member/src/test/resources
          echo 'docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy' > member/src/test/resources/testcontainers.properties
          echo 'ryuk.container.privileged=true' >> member/src/test/resources/testcontainers.properties
          echo 'testcontainers.reuse.enable=true' >> member/src/test/resources/testcontainers.properties
          
          # MySub service TestContainers 설정
          mkdir -p mysub-infra/src/test/resources
          echo 'docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy' > mysub-infra/src/test/resources/testcontainers.properties
          echo 'ryuk.container.privileged=true' >> mysub-infra/src/test/resources/testcontainers.properties
          echo 'testcontainers.reuse.enable=true' >> mysub-infra/src/test/resources/testcontainers.properties
          
          # Recommend service TestContainers 설정
          mkdir -p recommend/src/test/resources
          echo 'docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy' > recommend/src/test/resources/testcontainers.properties
          echo 'ryuk.container.privileged=true' >> recommend/src/test/resources/testcontainers.properties
          echo 'testcontainers.reuse.enable=true' >> recommend/src/test/resources/testcontainers.properties

      - name: Build applications
        run: |
          ./gradlew :member:clean :member:build -x test
          ./gradlew :mysub-infra:clean :mysub-infra:build -x test
          ./gradlew :recommend:clean :recommend:build -x test

      - name: Run tests and generate coverage reports
        run: |
          ./gradlew :member:test :member:jacocoTestReport
          ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport
          ./gradlew :recommend:test :recommend:jacocoTestReport

      - name: SonarQube Analysis - Member Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :member:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.projectKey=lifesub-member-dg0411 \
            -Dsonar.projectName=lifesub-member-dg0411 \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: SonarQube Analysis - MySub Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :mysub-infra:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.projectKey=lifesub-mysub-dg0411 \
            -Dsonar.projectName=lifesub-mysub-dg0411 \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: SonarQube Analysis - Recommend Service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew :recommend:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.projectKey=lifesub-recommend-dg0411 \
            -Dsonar.projectName=lifesub-recommend-dg0411 \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            member/build/libs/*.jar
            mysub-infra/build/libs/*.jar
            recommend/build/libs/*.jar
          retention-days: 1

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for SonarQube Quality Gate - Member
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: member/.scannerwork/report-task.txt
        continue-on-error: false

      - name: Wait for SonarQube Quality Gate - MySub
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: mysub-infra/.scannerwork/report-task.txt
        continue-on-error: false

      - name: Wait for SonarQube Quality Gate - Recommend
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: recommend/.scannerwork/report-task.txt
        continue-on-error: false

  release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, quality-gate]
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read deployment environment variables
        run: |
          # deployment/deploy_env_vars 파일에서 환경변수 읽기 (안전한 방식)
          while IFS= read -r line || [ -n "$line" ]; do
            # 주석과 빈 줄 제외하고 = 포함된 라인만 처리
            if [[ ! "$line" =~ ^# ]] && [[ "$line" =~ = ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < deployment/deploy_env_vars

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Generated image tag: $IMAGE_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push member service image
        run: |
          echo "Building member service..."
          docker build \
            --build-arg BUILD_LIB_DIR="member/build/libs" \
            --build-arg ARTIFACTORY_FILE="member.jar" \
            -f deployment/container/Dockerfile \
            -t ${{ env.registry }}/${{ env.image_org }}/member:${{ env.IMAGE_TAG }} .
          docker push ${{ env.registry }}/${{ env.image_org }}/member:${{ env.IMAGE_TAG }}
          echo "Successfully built and pushed member:${{ env.IMAGE_TAG }}"

      - name: Build and push mysub service image
        run: |
          echo "Building mysub service..."
          docker build \
            --build-arg BUILD_LIB_DIR="mysub-infra/build/libs" \
            --build-arg ARTIFACTORY_FILE="mysub.jar" \
            -f deployment/container/Dockerfile \
            -t ${{ env.registry }}/${{ env.image_org }}/mysub:${{ env.IMAGE_TAG }} .
          docker push ${{ env.registry }}/${{ env.image_org }}/mysub:${{ env.IMAGE_TAG }}
          echo "Successfully built and pushed mysub:${{ env.IMAGE_TAG }}"

      - name: Build and push recommend service image
        run: |
          echo "Building recommend service..."
          docker build \
            --build-arg BUILD_LIB_DIR="recommend/build/libs" \
            --build-arg ARTIFACTORY_FILE="recommend.jar" \
            -f deployment/container/Dockerfile \
            -t ${{ env.registry }}/${{ env.image_org }}/recommend:${{ env.IMAGE_TAG }} .
          docker push ${{ env.registry }}/${{ env.image_org }}/recommend:${{ env.IMAGE_TAG }}
          echo "Successfully built and pushed recommend:${{ env.IMAGE_TAG }}"

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read deployment environment variables
        run: |
          # deployment/deploy_env_vars 파일에서 환경변수 읽기 (안전한 방식)
          while IFS= read -r line || [ -n "$line" ]; do
            # 주석과 빈 줄 제외하고 = 포함된 라인만 처리
            if [[ ! "$line" =~ ^# ]] && [[ "$line" =~ = ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < deployment/deploy_env_vars

      - name: Set image tag from previous job
        run: |
          echo "IMAGE_TAG=${{ needs.release.outputs.image-tag }}" >> $GITHUB_ENV

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Kubernetes manifest
        run: |
          # 환경변수 설정
          export namespace=${{ env.namespace }}
          export allowed_origins=${{ env.allowed_origins }}
          export ingress_host=${{ env.ingress_host }}
          export jwt_secret_key=${{ env.jwt_secret_key }}
          export postgres_user=${{ env.postgres_user }}
          export postgres_password=${{ env.postgres_password }}
          export replicas=${{ env.replicas }}
          export resources_requests_cpu=${{ env.resources_requests_cpu }}
          export resources_requests_memory=${{ env.resources_requests_memory }}
          export resources_limits_cpu=${{ env.resources_limits_cpu }}
          export resources_limits_memory=${{ env.resources_limits_memory }}
          
          # 이미지 경로 환경변수 설정
          export member_image_path=${{ env.registry }}/${{ env.image_org }}/member:${{ env.IMAGE_TAG }}
          export mysub_image_path=${{ env.registry }}/${{ env.image_org }}/mysub:${{ env.IMAGE_TAG }}
          export recommend_image_path=${{ env.registry }}/${{ env.image_org }}/recommend:${{ env.IMAGE_TAG }}
          
          # manifest 생성
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml

      - name: Debug - Show generated manifest
        run: |
          echo "Generated manifest content:"
          cat deployment/deploy.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/deploy.yaml

      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s

      - name: Verify deployment
        run: |
          echo "Checking pod status..."
          kubectl -n ${{ env.namespace }} get pods
          
          echo "Checking service status..."
          kubectl -n ${{ env.namespace }} get svc
          
          echo "Checking ingress status..."
          kubectl -n ${{ env.namespace }} get ingress

      - name: Display deployment status
        run: |
          echo "========================================="
          echo "Backend services deployment completed!"
          echo "Member Service: Ready"
          echo "MySub Service: Ready"
          echo "Recommend Service: Ready"
          echo "Ingress Host: ${{ env.ingress_host }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"
          echo "========================================="